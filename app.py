import streamlit as st
import pandas as pd
import plotly.express as px
import datetime

# 0. ÌéòÏù¥ÏßÄ Í∏∞Î≥∏ ÏÑ§Ï†ï
st.set_page_config(
    page_title="Ïã†Î¨∏ÏÇ¨ ÏÑ±Í≥º ÎåÄÏãúÎ≥¥Îìú",
    page_icon="üì∞",
    layout="wide"
)

# 1. Îç∞Ïù¥ÌÑ∞ Î°úÎî© (Ï∫êÏãú ÏÇ¨Ïö©)
@st.cache_data
def load_data(file_path="data.csv"):
    try:
        df = pd.read_csv(file_path)
    except FileNotFoundError:
        st.error(f"'{file_path}' ÌååÏùºÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§. GitHub Ï†ÄÏû•ÏÜåÏóê data.csvÍ∞Ä ÏûàÎäîÏßÄ ÌôïÏù∏ÌïòÏÑ∏Ïöî.")
        return pd.DataFrame()
    except Exception as e:
        st.error(f"Îç∞Ïù¥ÌÑ∞ Î°úÎî© Ï§ë Ïò§Î•ò Î∞úÏÉù: {e}")
        return pd.DataFrame()
        
    df['ÎÇ†Ïßú'] = pd.to_datetime(df['ÎÇ†Ïßú'])
    
    # Í¥ëÍ≥† Îç∞Ïù¥ÌÑ∞Í∞Ä ÏóÜÎäî Í≤ΩÏö∞(NaN) 0ÏúºÎ°ú Ï≤òÎ¶¨
    df['Í¥ëÍ≥†ÎπÑ'] = df['Í¥ëÍ≥†ÎπÑ'].fillna(0)
    df['ÌÅ¥Î¶≠Ïàò'] = df['ÌÅ¥Î¶≠Ïàò'].fillna(0)
    
    return df

df = load_data()

if df.empty:
    st.stop()

# --- ÏÇ¨Ïù¥ÎìúÎ∞î ---
st.sidebar.header("ÌïÑÌÑ∞ ÏÑ§Ï†ï")

min_date = df['ÎÇ†Ïßú'].min().date()
max_date = df['ÎÇ†Ïßú'].max().date()

start_date, end_date = st.sidebar.date_input(
    "Ï°∞Ìöå Í∏∞Í∞ÑÏùÑ ÏÑ†ÌÉùÌïòÏÑ∏Ïöî:",
    value=[min_date, max_date],
    min_value=min_date,
    max_value=max_date,
    format="YYYY.MM.DD"
)

# --- ÌïÑÌÑ∞ÎßÅÎêú Îç∞Ïù¥ÌÑ∞ ÏÉùÏÑ± ---
df_filtered = df[
    (df['ÎÇ†Ïßú'] >= pd.to_datetime(start_date)) & 
    (df['ÎÇ†Ïßú'] <= pd.to_datetime(end_date))
]

if df_filtered.empty:
    st.warning("ÏÑ†ÌÉùÌïú Í∏∞Í∞ÑÏóê Îç∞Ïù¥ÌÑ∞Í∞Ä ÏóÜÏäµÎãàÎã§.")
    st.stop()

# --- Î©îÏù∏ ÎåÄÏãúÎ≥¥Îìú ---
st.title("üì∞ Ïù∏ÌÑ∞ÎÑ∑ Ïã†Î¨∏ÏÇ¨ ÏÑ±Í≥º ÎåÄÏãúÎ≥¥Îìú (v4 - Í¥ëÍ≥† Ìè¨Ìï®)")

# 2. ÌÉ≠(Tabs)ÏúºÎ°ú Î¶¨Ìè¨Ìä∏ ÌéòÏù¥ÏßÄ Î∂ÑÎ¶¨
tab1, tab2, tab3, tab4, tab5 = st.tabs([
    "1. Ï†ÑÏ≤¥ ÏÑ±Í≥º (PDF 1p)", 
    "2. Ïπ¥ÌÖåÍ≥†Î¶¨ Î∂ÑÏÑù (PDF 3p)",
    "3. Ïù∏Í∏∞ Í∏∞ÏÇ¨ Î∂ÑÏÑù (PDF 2p)",
    "4. ÎèÖÏûê ÌäπÏÑ± Î∂ÑÏÑù (PDF 4p)",
    "5. Í¥ëÍ≥† ÏÑ±Í≥º Î∂ÑÏÑù (Ïã†Í∑ú)"
])

# --- Tab 1: Ï†ÑÏ≤¥ ÏÑ±Í≥º ÏöîÏïΩ ---
with tab1:
    st.header("üìà Ï†ÑÏ≤¥ ÏÑ±Í≥º ÏöîÏïΩ")
    
    total_pv = int(df_filtered['PV'].sum())
    total_uv = int(df_filtered['UV'].sum())
    total_cost = int(df_filtered['Í¥ëÍ≥†ÎπÑ'].sum())
    
    col1, col2, col3 = st.columns(3)
    col1.metric(label="Ï¥ù Ï°∞ÌöåÏàò (PV)", value=f"{total_pv:,}")
    col2.metric(label="Ï¥ù ÏÇ¨Ïö©Ïûê (UV)", value=f"{total_uv:,}")
    col3.metric(label="Ï¥ù Í¥ëÍ≥†ÎπÑ", value=f"‚Ç©{total_cost:,}") # Ï†ÑÏ≤¥ ÌÉ≠ÏóêÎèÑ Í¥ëÍ≥†ÎπÑ ÏöîÏïΩ Ï∂îÍ∞Ä

    st.markdown("---")
    # (Ïù¥Ìïò Tab 1Ïùò ÎÇòÎ®∏ÏßÄ ÏΩîÎìúÎäî v3ÏôÄ ÎèôÏùº)
    col_chart1, col_chart2 = st.columns(2)
    df_daily = df_filtered.groupby('ÎÇ†Ïßú')[['PV', 'UV']].sum().reset_index()

    with col_chart1:
        st.subheader("ÏùºÎ≥Ñ Ï°∞ÌöåÏàò(PV) Ï∂îÏù¥")
        fig_bar_pv = px.bar(df_daily, x='ÎÇ†Ïßú', y='PV', title='ÏùºÎ≥Ñ Ï°∞ÌöåÏàò')
        st.plotly_chart(fig_bar_pv, use_container_width=True)

    with col_chart2:
        st.subheader("ÏùºÎ≥Ñ ÏÇ¨Ïö©Ïûê(UV) Ï∂îÏù¥")
        fig_bar_uv = px.bar(df_daily, x='ÎÇ†Ïßú', y='UV', title='ÏùºÎ≥Ñ Ïàú ÏÇ¨Ïö©Ïûê', color_discrete_sequence=['orange'])
        st.plotly_chart(fig_bar_uv, use_container_width=True)

    st.markdown("---")
    st.subheader("Ïú†ÏûÖ Í≤ΩÎ°úÎ≥Ñ ÏÇ¨Ïö©Ïûê (UV)")
    df_source = df_filtered.groupby('Ïú†ÏûÖ Í≤ΩÎ°ú')['UV'].sum().sort_values(ascending=False).reset_index()
    fig_pie_source = px.pie(df_source, names='Ïú†ÏûÖ Í≤ΩÎ°ú', values='UV', hole=0.4)
    fig_pie_source.update_traces(textposition='outside', textinfo='value+label')
    st.plotly_chart(fig_pie_source, use_container_width=True)


# --- Tab 2: Ïπ¥ÌÖåÍ≥†Î¶¨Î≥Ñ Î∂ÑÏÑù ---
with tab2:
    st.header("üóÇÔ∏è Ïπ¥ÌÖåÍ≥†Î¶¨Î≥Ñ ÏÑ±Í≥º Î∂ÑÏÑù")
    # (v3ÏôÄ ÎèôÏùº)
    df_category = df_filtered.groupby('Í∏∞ÏÇ¨ Ïπ¥ÌÖåÍ≥†Î¶¨').agg(
        PV=('PV', 'sum'),
        UV=('UV', 'sum'),
        Í∏∞ÏÇ¨Ïàò=('ÎÇ†Ïßú', 'count'),
        Ïù¥ÌÉàÎ•†=('Ïù¥ÌÉàÎ•†', 'mean')
    ).reset_index().sort_values(by="PV", ascending=False)
    
    st.subheader("Ïπ¥ÌÖåÍ≥†Î¶¨Î≥Ñ Ï°∞ÌöåÏàò (PV)")
    fig_cat_bar = px.bar(df_category, x='Í∏∞ÏÇ¨ Ïπ¥ÌÖåÍ≥†Î¶¨', y='PV', title='Ïπ¥ÌÖåÍ≥†Î¶¨Î≥Ñ Ï¥ù Ï°∞ÌöåÏàò')
    st.plotly_chart(fig_cat_bar, use_container_width=True)
    
    st.markdown("---")
    st.subheader("Ïπ¥ÌÖåÍ≥†Î¶¨Î≥Ñ ÏÉÅÏÑ∏ Îç∞Ïù¥ÌÑ∞")
    st.dataframe(
        df_category, use_container_width=True,
        column_config={"PV": st.column_config.NumberColumn("Ï°∞ÌöåÏàò", format="%,d"),
                       "UV": st.column_config.NumberColumn("ÏÇ¨Ïö©Ïûê", format="%,d"),
                       "Í∏∞ÏÇ¨Ïàò": st.column_config.NumberColumn(format="%,d"),
                       "Ïù¥ÌÉàÎ•†": st.column_config.ProgressColumn(format="%.1f%%", min_value=0, max_value=1),
                      })

# --- Tab 3: Ïù∏Í∏∞ Í∏∞ÏÇ¨ Î∂ÑÏÑù ---
with tab3:
    st.header("üìù Ïù∏Í∏∞ Í∏∞ÏÇ¨ Î∂ÑÏÑù (Top 10)")
    # (v3ÏôÄ ÎèôÏùº)
    df_article = df_filtered.groupby(['Í∏∞ÏÇ¨ Ï†úÎ™©', 'ÏûëÏÑ±Ïûê', 'Í∏∞ÏÇ¨ Ïπ¥ÌÖåÍ≥†Î¶¨']).agg(
        PV=('PV', 'sum'),
        UV=('UV', 'sum'),
        Ïù¥ÌÉàÎ•†=('Ïù¥ÌÉàÎ•†', 'mean')
    ).reset_index().sort_values(by="PV", ascending=False)

    st.subheader("Í∏∞ÏÇ¨Î≥Ñ ÏÉÅÏÑ∏ Îç∞Ïù¥ÌÑ∞ (Top 10)")
    st.dataframe(
        df_article.head(10), use_container_width=True,
        column_config={"PV": st.column_config.NumberColumn("Ï°∞ÌöåÏàò", format="%,d"),
                       "UV": st.column_config.NumberColumn("ÏÇ¨Ïö©Ïûê", format="%,d"),
                       "Ïù¥ÌÉàÎ•†": st.column_config.ProgressColumn(format="%.1f%%", min_value=0, max_value=1),
                      }, hide_index=True)

    st.markdown("---")
    st.subheader("ÏûëÏÑ±ÏûêÎ≥Ñ ÏÑ±Í≥º")
    df_author = df_filtered.groupby('ÏûëÏÑ±Ïûê').agg(
        PV=('PV', 'sum'),
        Í∏∞ÏÇ¨Ïàò=('Í∏∞ÏÇ¨ Ï†úÎ™©', 'nunique')
    ).reset_index().sort_values(by="PV", ascending=False)
    fig_author = px.bar(df_author, x='ÏûëÏÑ±Ïûê', y='PV', title='ÏûëÏÑ±ÏûêÎ≥Ñ Ï¥ù Ï°∞ÌöåÏàò')
    st.plotly_chart(fig_author, use_container_width=True)


# --- Tab 4: ÎèÖÏûê ÌäπÏÑ± Î∂ÑÏÑù ---
with tab4:
    st.header("üë• ÎèÖÏûê ÌäπÏÑ± Î∂ÑÏÑù (Demographics)")
    # (v3ÏôÄ ÎèôÏùº)
    col_demo1, col_demo2 = st.columns(2)
    with col_demo1:
        st.subheader("Í∏∞Í∏∞Î≥Ñ ÏÇ¨Ïö©Ïûê(UV)")
        df_device = df_filtered.groupby('Í∏∞Í∏∞')['UV'].sum().reset_index()
        fig_device = px.pie(df_device, names='Í∏∞Í∏∞', values='UV')
        st.plotly_chart(fig_device, use_container_width=True)

        st.subheader("ÏßÄÏó≠Î≥Ñ ÏÇ¨Ïö©Ïûê(UV)")
        df_region = df_filtered.groupby('ÏßÄÏó≠')['UV'].sum().reset_index().sort_values(by="UV", ascending=False)
        df_region = df_region[df_region['ÏßÄÏó≠'] != '(not set)']
        fig_region = px.pie(df_region.head(7), names='ÏßÄÏó≠', values='UV')
        st.plotly_chart(fig_region, use_container_width=True)
    with col_demo2:
        st.subheader("ÏÑ±Î≥Ñ ÏÇ¨Ïö©Ïûê(UV)")
        df_gender = df_filtered.groupby('ÏÑ±Î≥Ñ')['UV'].sum().reset_index()
        df_gender = df_gender[df_gender['ÏÑ±Î≥Ñ'] != 'unknown']
        fig_gender = px.pie(df_gender, names='ÏÑ±Î≥Ñ', values='UV')
        st.plotly_chart(fig_gender, use_container_width=True)

        st.subheader("Ïó∞Î†πÎ≥Ñ ÏÇ¨Ïö©Ïûê(UV)")
        df_age = df_filtered.groupby('Ïó∞Î†π')['UV'].sum().reset_index()
        df_age = df_age[df_age['Ïó∞Î†π'] != 'unknown']
        fig_age = px.pie(df_age, names='Ïó∞Î†π', values='UV')
        st.plotly_chart(fig_age, use_container_width=True)


# --- Tab 5: Í¥ëÍ≥† ÏÑ±Í≥º Î∂ÑÏÑù (NEW) ---
with tab5:
    st.header("üìä Í¥ëÍ≥† ÏÑ±Í≥º Î∂ÑÏÑù")

    # 1. Í¥ëÍ≥† KPI ÏöîÏïΩ
    total_cost = int(df_filtered['Í¥ëÍ≥†ÎπÑ'].sum())
    total_clicks = int(df_filtered['ÌÅ¥Î¶≠Ïàò'].sum())
    total_pv = int(df_filtered['PV'].sum()) # CTR Í≥ÑÏÇ∞Ïö©
    
    # 0ÏúºÎ°ú ÎÇòÎàÑÍ∏∞ Î∞©ÏßÄ
    avg_cpc = total_cost / total_clicks if total_clicks > 0 else 0
    avg_ctr = (total_clicks / total_pv) * 100 if total_pv > 0 else 0

    st.subheader("Í¥ëÍ≥† ÌïµÏã¨ ÏßÄÌëú(KPI)")
    col_ad1, col_ad2, col_ad3 = st.columns(3)
    col_ad1.metric(label="Ï¥ù Í¥ëÍ≥†ÎπÑ", value=f"‚Ç©{total_cost:,}")
    col_ad2.metric(label="Ï¥ù ÌÅ¥Î¶≠Ïàò (Clicks)", value=f"{total_clicks:,}")
    col_ad3.metric(label="ÌèâÍ∑† ÌÅ¥Î¶≠ÎãπÎπÑÏö© (CPC)", value=f"‚Ç©{avg_cpc:,.0f}")
    col_ad1.metric(label="ÌèâÍ∑† ÌÅ¥Î¶≠Î•† (CTR)", value=f"{avg_ctr:.2f}%")
    
    st.markdown("---")

    # 2. ÏöîÏ≤≠ÌïòÏã† "Ìëú" (Ïπ¥ÌÖåÍ≥†Î¶¨Î≥Ñ Í¥ëÍ≥† ÏÑ±Í≥º)
    st.subheader("Ïπ¥ÌÖåÍ≥†Î¶¨Î≥Ñ Í¥ëÍ≥† ÏÑ±Í≥º ÏÉÅÏÑ∏ (Ìëú)")
    
    df_ad_category = df_filtered.groupby('Í∏∞ÏÇ¨ Ïπ¥ÌÖåÍ≥†Î¶¨').agg(
        Í¥ëÍ≥†ÎπÑ=('Í¥ëÍ≥†ÎπÑ', 'sum'),
        ÌÅ¥Î¶≠Ïàò=('ÌÅ¥Î¶≠Ïàò', 'sum'),
        PV=('PV', 'sum')
    ).reset_index()
    
    # CPC (ÌÅ¥Î¶≠Îãπ ÎπÑÏö©) Í≥ÑÏÇ∞
    df_ad_category['CPC'] = df_ad_category.apply(
        lambda row: row['Í¥ëÍ≥†ÎπÑ'] / row['ÌÅ¥Î¶≠Ïàò'] if row['ÌÅ¥Î¶≠Ïàò'] > 0 else 0, axis=1
    )
    # CTR (ÌÅ¥Î¶≠Î•†) Í≥ÑÏÇ∞
    df_ad_category['CTR'] = df_ad_category.apply(
        lambda row: (row['ÌÅ¥Î¶≠Ïàò'] / row['PV']) * 100 if row['PV'] > 0 else 0, axis=1
    )
    
    df_ad_category = df_ad_category.sort_values(by="Í¥ëÍ≥†ÎπÑ", ascending=False)

    st.dataframe(
        df_ad_category,
        use_container_width=True,
        column_config={
            "Í¥ëÍ≥†ÎπÑ": st.column_config.NumberColumn(format="‚Ç© %,d"),
            "ÌÅ¥Î¶≠Ïàò": st.column_config.NumberColumn(format="%,d"),
            "PV": st.column_config.NumberColumn(format="%,d"),
            "CPC": st.column_config.NumberColumn(format="‚Ç© %,.0f"),
            "CTR": st.column_config.ProgressColumn(
                format="%.2f%%", min_value=0, max_value=df_ad_category['CTR'].max(),
            ),
        }
    )